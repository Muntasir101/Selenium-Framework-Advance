{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"username\"]\"}\n  (Session info: chrome=110.0.5481.178)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x010B37D3]\n\t(No symbol) [0x01048B81]\n\t(No symbol) [0x00F4B36D]\n\t(No symbol) [0x00F7D382]\n\t(No symbol) [0x00F7D4BB]\n\t(No symbol) [0x00FB3302]\n\t(No symbol) [0x00F9B464]\n\t(No symbol) [0x00FB1215]\n\t(No symbol) [0x00F9B216]\n\t(No symbol) [0x00F70D97]\n\t(No symbol) [0x00F7253D]\n\tGetHandleVerifier [0x0132ABF2+2510930]\n\tGetHandleVerifier [0x01358EC1+2700065]\n\tGetHandleVerifier [0x0135C86C+2714828]\n\tGetHandleVerifier [0x01163480+645344]\n\t(No symbol) [0x01050FD2]\n\t(No symbol) [0x01056C68]\n\t(No symbol) [0x01056D4B]\n\t(No symbol) [0x01060D6B]\n\tBaseThreadInitThunk [0x75DD7D69+25]\n\tRtlInitializeExceptionChain [0x776EBB9B+107]\n\tRtlClearBits [0x776EBB1F+191]", "trace": "@allure.feature(\"Login Feature\")\n    def test_login():\n        # Get the configuration settings\n        url = get_config_value(\"DEFAULT\", \"url\")\n        print(url)\n        browser = get_config_value(\"DEFAULT\", \"browser\")\n        headless = get_config_value(\"DEFAULT\", \"headless\")\n    \n        # Initialize the web driver\n        if browser == \"chrome\":\n            options = webdriver.ChromeOptions()\n            if headless == \"True\":\n                options.add_argument(\"headless\")\n            driver = webdriver.Chrome(options=options)\n        else:\n            driver = webdriver.Firefox()\n    \n        # Navigate to the login page\n        driver.get(url)\n        login_page = LoginPage(driver)\n    \n        # Enter the username and password\n>       login_page.enter_username(\"username\")\n\ntests\\test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\LoginPage.py:12: in enter_username\n    self.driver.find_element(*self.username).send_keys(username)\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000172E820F730>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75DD7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x776EBB9B+107]\\\\n\\\\tRtlClearBits [0x776EBB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"username\"]\"}\nE         (Session info: chrome=110.0.5481.178)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x010B37D3]\nE       \t(No symbol) [0x01048B81]\nE       \t(No symbol) [0x00F4B36D]\nE       \t(No symbol) [0x00F7D382]\nE       \t(No symbol) [0x00F7D4BB]\nE       \t(No symbol) [0x00FB3302]\nE       \t(No symbol) [0x00F9B464]\nE       \t(No symbol) [0x00FB1215]\nE       \t(No symbol) [0x00F9B216]\nE       \t(No symbol) [0x00F70D97]\nE       \t(No symbol) [0x00F7253D]\nE       \tGetHandleVerifier [0x0132ABF2+2510930]\nE       \tGetHandleVerifier [0x01358EC1+2700065]\nE       \tGetHandleVerifier [0x0135C86C+2714828]\nE       \tGetHandleVerifier [0x01163480+645344]\nE       \t(No symbol) [0x01050FD2]\nE       \t(No symbol) [0x01056C68]\nE       \t(No symbol) [0x01056D4B]\nE       \t(No symbol) [0x01060D6B]\nE       \tBaseThreadInitThunk [0x75DD7D69+25]\nE       \tRtlInitializeExceptionChain [0x776EBB9B+107]\nE       \tRtlClearBits [0x776EBB1F+191]\n\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException"}, "attachments": [{"name": "stdout", "source": "c2196089-8f9e-4def-b9ab-752f230156e9-attachment.txt", "type": "text/plain"}], "start": 1678039908964, "stop": 1678039919403, "uuid": "0bd89c97-ba67-44bc-909c-61fa4d862869", "historyId": "144503cdd62308bf9f77a1ff306826fa", "testCaseId": "a707b9555172d26c5c1ec2d556e674f3", "fullName": "tests.test_login#test_login", "labels": [{"name": "feature", "value": "Login Feature"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Muntasir"}, {"name": "thread", "value": "7136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}