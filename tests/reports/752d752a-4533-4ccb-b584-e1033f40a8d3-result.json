{"name": "test_login", "status": "broken", "statusDetails": {"message": "AttributeError: 'WebDriver' object has no attribute 'accept_insecure_certs'", "trace": "@allure.feature(\"Login Feature\")\n    def test_login():\n        # Get the configuration settings\n        url = get_config_value(\"DEFAULT\", \"url\")\n        browser = get_config_value(\"DEFAULT\", \"browser\")\n        headless = get_config_value(\"DEFAULT\", \"headless\")\n    \n        # Initialize the web driver\n        if browser == \"chrome\":\n            options = webdriver.ChromeOptions()\n            if headless == \"True\":\n                options.add_argument(\"headless\")\n            driver = webdriver.Chrome(options=options)\n        else:\n            options = webdriver.Firefox()\n            if headless == \"True\":\n                options.add_argument(\"-headless\")\n>           driver = webdriver.Firefox(options=options)\n\ntest_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x29f9af0d4e0>\nfirefox_profile = None, firefox_binary = None\ncapabilities = {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True}\nproxy = None, executable_path = 'geckodriver'\noptions = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"1c1992e6-f054-4d21-a078-6687216e94f6\")>\nservice_log_path = 'geckodriver.log', service_args = None, service = None\ndesired_capabilities = None, log_path = None, keep_alive = True\n\n    def __init__(\n        self,\n        firefox_profile=None,\n        firefox_binary=None,\n        capabilities=None,\n        proxy=None,\n        executable_path=DEFAULT_EXECUTABLE_PATH,\n        options=None,\n        service_log_path=DEFAULT_SERVICE_LOG_PATH,\n        service_args=None,\n        service=None,\n        desired_capabilities=None,\n        log_path=DEFAULT_LOG_PATH,\n        keep_alive=True,  # Todo: Why is this now unused?\n    ) -> None:\n        \"\"\"Starts a new local session of Firefox.\n    \n        Based on the combination and specificity of the various keyword\n        arguments, a capabilities dictionary will be constructed that\n        is passed to the remote end.\n    \n        The keyword arguments given to this constructor are helpers to\n        more easily allow Firefox WebDriver sessions to be customised\n        with different options.  They are mapped on to a capabilities\n        dictionary that is passed on to the remote end.\n    \n        As some of the options, such as `firefox_profile` and\n        `options.profile` are mutually exclusive, precedence is\n        given from how specific the setting is.  `capabilities` is the\n        least specific keyword argument, followed by `options`,\n        followed by `firefox_binary` and `firefox_profile`.\n    \n        In practice this means that if `firefox_profile` and\n        `options.profile` are both set, the selected profile\n        instance will always come from the most specific variable.\n        In this case that would be `firefox_profile`.  This will result in\n        `options.profile` to be ignored because it is considered\n        a less specific setting than the top-level `firefox_profile`\n        keyword argument.  Similarly, if you had specified a\n        `capabilities[\"moz:firefoxOptions\"][\"profile\"]` Base64 string,\n        this would rank below `options.profile`.\n    \n        :param firefox_profile: Deprecated: Instance of ``FirefoxProfile`` object\n            or a string.  If undefined, a fresh profile will be created\n            in a temporary location on the system.\n        :param firefox_binary: Deprecated: Instance of ``FirefoxBinary`` or full\n            path to the Firefox binary.  If undefined, the system default\n            Firefox installation will  be used.\n        :param capabilities: Deprecated: Dictionary of desired capabilities.\n        :param proxy: Deprecated: The proxy settings to use when communicating with\n            Firefox via the extension connection.\n        :param executable_path: Deprecated: Full path to override which geckodriver\n            binary to use for Firefox 47.0.1 and greater, which\n            defaults to picking up the binary from the system path.\n        :param options: Instance of ``options.Options``.\n        :param service: (Optional) service instance for managing the starting and stopping of the driver.\n        :param service_log_path: Deprecated: Where to log information from the driver.\n        :param service_args: Deprecated: List of args to pass to the driver service\n        :param desired_capabilities: Deprecated: alias of capabilities. In future\n            versions of this library, this will replace 'capabilities'.\n            This will make the signature consistent with RemoteWebDriver.\n        :param keep_alive: Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive.\n        \"\"\"\n    \n        if executable_path != DEFAULT_EXECUTABLE_PATH:\n            warnings.warn(\n                \"executable_path has been deprecated, please pass in a Service object\", DeprecationWarning, stacklevel=2\n            )\n        if capabilities or desired_capabilities:\n            warnings.warn(\n                \"capabilities and desired_capabilities have been deprecated, please pass in a Service object\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        if firefox_binary:\n            warnings.warn(\n                \"firefox_binary has been deprecated, please pass in a Service object\", DeprecationWarning, stacklevel=2\n            )\n        self.binary = None\n        if firefox_profile:\n            warnings.warn(\n                \"firefox_profile has been deprecated, please pass in an Options object\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        self.profile = None\n    \n        if log_path != DEFAULT_LOG_PATH:\n            warnings.warn(\n                \"log_path has been deprecated, please pass in a Service object\", DeprecationWarning, stacklevel=2\n            )\n    \n        # Service Arguments being deprecated.\n        if service_log_path != DEFAULT_SERVICE_LOG_PATH:\n            warnings.warn(\n                \"service_log_path has been deprecated, please pass in a Service object\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        if service_args:\n            warnings.warn(\n                \"service_args has been deprecated, please pass in a Service object\", DeprecationWarning, stacklevel=2\n            )\n    \n        self.service = service\n    \n        # If desired capabilities is set, alias it to capabilities.\n        # If both are set ignore desired capabilities.\n        if not capabilities and desired_capabilities:\n            capabilities = desired_capabilities\n    \n        if not capabilities:\n            capabilities = DesiredCapabilities.FIREFOX.copy()\n        if not options:\n            options = Options()\n    \n        capabilities = dict(capabilities)\n    \n        if capabilities.get(\"binary\"):\n            options.binary = capabilities[\"binary\"]\n    \n        # options overrides capabilities\n        if options:\n            if options.binary:\n                self.binary = options.binary\n            if options.profile:\n                self.profile = options.profile\n    \n        # firefox_binary and firefox_profile\n        # override options\n        if firefox_binary:\n            if isinstance(firefox_binary, str):\n                firefox_binary = FirefoxBinary(firefox_binary)\n            self.binary = firefox_binary\n            options.binary = firefox_binary\n        if firefox_profile:\n            if isinstance(firefox_profile, str):\n                firefox_profile = FirefoxProfile(firefox_profile)\n            self.profile = firefox_profile\n            options.profile = firefox_profile\n    \n>       if not capabilities.get(\"acceptInsecureCerts\") or not options.accept_insecure_certs:\nE       AttributeError: 'WebDriver' object has no attribute 'accept_insecure_certs'\n\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:186: AttributeError"}, "attachments": [{"name": "stdout", "source": "b7ce629b-59f7-4729-9770-6045c1e73318-attachment.txt", "type": "text/plain"}], "start": 1678039562908, "stop": 1678039568312, "uuid": "5db6c7c4-5a1e-4e03-ba50-25bcb14c24d2", "historyId": "144503cdd62308bf9f77a1ff306826fa", "testCaseId": "a707b9555172d26c5c1ec2d556e674f3", "fullName": "tests.test_login#test_login", "labels": [{"name": "feature", "value": "Login Feature"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Muntasir"}, {"name": "thread", "value": "17968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}